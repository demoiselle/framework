<?xml version='1.0' encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="paginacao">

   <title>Paginação</title>
  
   <para>
      Neste capítulo serão considerados os seguintes assuntos:
      <itemizedlist>
         <listitem>motivação para o uso de um mecanismo padronizado para <emphasis>paginação</emphasis>;</listitem>
         <listitem>funcionamento e uso da estrutura <literal>Pagination</literal> e do contexto de paginação (<literal>PaginationContext</literal>).</listitem>
      </itemizedlist>
   </para>

   <section>
      <title>Introdução ao mecanismo</title>
      <para>
         A apresentação de conjuntos de registros de médio a grande porte em formato de tabelas em aplicações Web geralmente requer um
         <emphasis>mecanismo de paginação</emphasis>, o qual permite ao cliente ver apenas um pedaço do resultado final, podendo este
         navegar para frente e para trás através dos registros. A menos que o conjunto de registros seja garantidamente pequeno, qualquer
         aplicação do tipo Web com funcionalidades de busca precisa ser dotada de paginação.
      </para>
      <para>
         O mecanismo de paginação para as aplicações fornecido pelo <emphasis>Demoiselle Framework</emphasis> consiste em um algoritmo de
         direcionado ao banco de dados (i.e., Database-Driven Pagination). Essa abordagem, apesar de requerer instruções SQL específicas
         para obter porções determinadas de registros, é a mais utilizada por ser mais eficiente e produzir menos redundância dos dados.
      </para>
      <para>
         É fornecido em tempo de execução um <emphasis>contexto de paginação</emphasis>, o qual tem escopo de sessão e armazena a informação
         de paginação de cada entidade (i.e., bean) que necessite de tal mecanismo. Esse contexto é compartilhado entre as diversas camadas
         da aplicação, especificamente entre as camadas de visão e persistência. Dessa maneira, a paginação dos dados é transparente para a
         camada intermediária (i.e., negócio) e não interfere na modelagem das classes de um projeto.
      </para>
   </section>

   <section>
      <title>Códigos de suporte</title>
      <para>
         // TODO: explicar Pagination e PaginationContext
      </para>
      <para>
         Veremos na seção seguinte como implementar a paginação em uma aplicação Java.
 
  - Farão parte do código de suporte para paginação:
      * a classe Pagination: usada para manipular a paginação dos dados resultantes, contendo os campos currentPage (página atual, selecionada na camada de visão), pageSize (tamanho da página, a quantidade de registros que ela comportará) e totalResults (a quantidade de resultados existentes na base de dados);
      * a classe PaginationContext: contexto usado para armazenar e fornecer estruturas do tipo Pagination;
      * a classe PaginationConfig: armazenador de configurações referentes à paginação.
         
- Códigos internos de suporte no Core:

      <programlisting role="JAVA"><![CDATA[

public class Pagination {

    private int currentPage;
    private int pageSize;

    private Long totalResults;
    private Integer totalPages;

    // ...
}

@SessionScoped
public class PaginationContext {

    private final Map<Class<?>, Pagination> map;

    public Pagination getPagination(Class<?> clazz) { ... }

    public Pagination getPagination(Class<?> clazz, boolean create) { ... }

}

@Configuration
public class PaginationConfig {

    @Key("default_page_size")
    private int defaultPageSize = 10;

    @Key("max_page_links")
    private int maxPageLinks = 5;

}

    - Códigos internos de suporte em JPA:

public class JPACrud<T, I> implements Crud<T, I> {

    @Inject
    private PaginationContext paginationContext;

    // ...

    public List<T> findAll() {

        final String jpql = "select this from " + getBeanClass().getSimpleName() + " this";
        final Query query = getEntityManager().createQuery(jpql);
        
        final Pagination pagination = paginationContext.getPagination(getBeanClass());
        if (pagination != null) {
            if (pagination.getTotalPages() == null) {
                pagination.setTotalResults(this.countAll());
            }
            query.setFirstResult(pagination.getFirstResult());
            query.setMaxResults(pagination.getPageSize());
        }

        // ...
    }

}

    - Códigos internos de suporte em JSF:

public abstract class AbstractListPageBean<T, I> extends AbstractPage implements ListPageBean<T, I> {

    @Inject
    private PaginationContext paginationContext;

    @Inject
    private PaginationConfig paginationConfig;

    // ...

    public Pagination getPagination() {
        return paginationContext.getPagination(getBeanClass(), true);
    }

    public int getPageSize() {
        return paginationConfig.getDefaultPageSize();
    }

    public int getMaxPageLinks() {
        return paginationConfig.getMaxPageLinks();
    }

}

frameworkdemoiselle.pagination.default_page_size=50
frameworkdemoiselle.pagination.max_page_links=10
         
]]></programlisting>
      </para>
   </section>
   
   <section>
      <title>Implementação na aplicação</title>
      <!-- 
      <para>
         A fim de utilizar o mecanismo inerente do <emphasis>Demoiselle Framework</emphasis>, é preciso simplesmente anotar os métodos
         contendo as instruções desejadas com <literal>@Startup</literal>, para a <emphasis>inicialização</emphasis>, ou
         <literal>@Shutdown</literal>, para a <emphasis>finalização</emphasis>.
      </para>
      <tip>
         <para>
            O mecanismo de inicialização do <emphasis>Demoiselle Framework</emphasis> é independente da natureza da aplicação Java, isto é,
            visa tanto aplicações do tipo Web quanto do tipo desktop (ex: Swing).
         </para>
      </tip>
      <para>
         As instruções contidas em um método anotado com <literal>@Startup</literal> serão executadas automaticamente quando a aplicação
         Java for inicializada, seja ela hospedada em um contêiner Web ou executada através de um método <literal>main()</literal>.
         Nenhum outro arquivo ou classe precisa ser definido. A anotação <literal>@Startup</literal> permite a indicação do argumento
         <literal>priority</literal>, um número inteiro que serve para definir a prioridade de execução do respectivo método na existência
         de mais de um inicializador para a aplicação.
      </para>
      <para>
         De maneira análoga, um método anotado com <literal>@Shutdown</literal> será executado no momento de finalização de uma aplicação,
         obedecendo também à ordem de prioridade definida com o argumento <literal>priority</literal>.
      </para>
       -->
      <para>
         Eis um exemplo de implementação de paginação em uma aplicação:
      </para>
      <programlisting role="JAVA"><![CDATA[
    @Inject
	private PaginationContext paginationContext;
]]></programlisting>
      <programlisting role="JAVA"><![CDATA[
    Pagination pagination = paginationContext.getPagination(Audit.class);
]]></programlisting>
      <tip>
         <para>
         	O método <literal>getPagination()</literal> do contexto <literal>PaginationContext</literal> é sobrecarregado, podendo aceitar
         	os seguintes argumentos: <literal>Class</literal> ou <literal>Class</literal> e <literal>boolean</literal>.
         </para>
      </tip>
      <note>
         <para>
            A JPA 2.0, através da Query API, suporta controle de paginação independente de fornecedor de banco de dados.
            Para controlar a paginação, a interface <literal>Query</literal> define os métodos <literal>setFirstResult()</literal> e
            <literal>setMaxResults()</literal> para especificar o primeiro resultado a ser recebido e o número máximo de resultados a
            serem retornados em relação àquele ponto. Internamente, são usadas instruções específicas do SGBD (ex: LIMIT e OFFSET no
            PostgreSQL).
         </para>
      </note>
   </section>
   
   <section>
      <title>Um exemplo usando PrimeFaces</title>
      <para>
         Eis um interessante caso de uso de paginação: ????.
         A seguir o código referente à essa implementação:
// camada de persistência
      </para>
      <programlisting role="JAVA"><![CDATA[@PersistenceController
public class AuditDAO extends JPACrud<Audit, Long> {
}
]]></programlisting>
      <para>
         ...
// camada de negócio
      </para>
      <programlisting role="JAVA"><![CDATA[@BusinessController
public class AuditBC extends DelegateCrud<Audit, Long, AuditDAO> {
}
]]></programlisting>
      <para>
         ...
// camada de visão
      </para>
      <programlisting role="JAVA"><![CDATA[import org.primefaces.model.LazyDataModel;
...

@ViewController
public class AuditMB extends AbstractListPageBean<Audit, Long> {

    @Inject
    private IAuditBC bc;

    private LazyDataModel<Audit> lazyModel;
    
    public AuditMB() {
        lazyModel = new LazyDataModel<Audit>() {
            
            public List<Audit> load(int first, int pageSize, String sortField,
                boolean sortOrder, Map<String, String> filters) {
                
                Pagination pagination = getPagination();
                pagination.setFirstResult(first);
                pagination.setPageSize(pageSize);
                
                return bc.findAll();
            }
        };
    }

    public LazyDataModel<Audit> getLazyModel() {
        return lazyModel;
    }

}]]></programlisting>
      <para>
		??? exemplo de uso de paginação em tabela com a implementação PrimeFaces:
      </para>
      <programlisting role="XML"><![CDATA[<p:dataTable id="list" height="300" var="bean"
    value="#{auditMB.lazyModel}" lazy="true" paginator="true"
    rows="#{auditMB.pageSize}" pageLinks="#{auditMB.maxPageLinks}">]]></programlisting>
   </section>

   <section>
      <title>Referências</title>
      <itemizedlist>
         <listitem>JPA 2.0 [JSR-317] (http://jcp.org/en/jsr/detail?id=317)</listitem>
         <listitem>Implementing Search Result Pagination in a Web Application (http://www.developer.com/java/other/article.php/3696226/)</listitem>
         <listitem>A Pagination Technique Using Spring (http://www.developer.com/java/web/article.php/10935_3830886_1/)</listitem>
         <listitem>Spring JDBC Pagination Tutorial (http://www.codefutures.com/tutorials/spring-pagination/)</listitem>
         <listitem>PrimeFaces DataTable - Lazy Loading (http://www.primefaces.org/showcase/ui/datatableLazy.jsf)</listitem>
      </itemizedlist>
   </section>
   
</chapter>
